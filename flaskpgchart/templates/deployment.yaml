apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "flaskpg.fullname" . }}-flask
  labels:
    {{- include "flaskpg.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.flaskApp.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: flask
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "flaskpg.labels" . | nindent 8 }}
        app.kubernetes.io/component: flask
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-postgres
          image: "{{ .Values.flaskApp.waitForPostgres.image }}:{{ .Values.flaskApp.waitForPostgres.tag }}"
          command:
            - sh
            - -c
            - |
              until nc -zv {{ .Values.flaskApp.env.databaseHost }} {{ .Values.flaskApp.env.databasePort }}; do
                echo "waiting for postgres...";
                sleep 2;
              done
          resources:
            {{- toYaml .Values.flaskApp.waitForPostgres.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.flaskApp.waitForPostgres.securityContext | nindent 12 }}
      containers:
        - name: flask
          image: "{{ .Values.flaskApp.image.repository }}:{{ required "flaskApp.image.tag must be set (not latest)" .Values.flaskApp.image.tag }}"
          imagePullPolicy: {{ .Values.flaskApp.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.flaskApp.containerPort }}
          env:
            - name: DATABASE_HOST
              value: {{ .Values.flaskApp.env.databaseHost | quote }}
            - name: DATABASE_PORT
              value: {{ .Values.flaskApp.env.databasePort | quote }}
          resources:
            {{- toYaml .Values.flaskApp.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.flaskApp.securityContext | nindent 12 }}
